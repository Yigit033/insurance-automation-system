  import { useState, useEffect } from 'react';
  import { supabase } from '@/integrations/supabase/client';
  import { useAuth } from '@/contexts/AuthContext';
  import { config } from '@/utils/environment';
  import DocumentProcessor from '@/lib/documentProcessor';
  import { processBase64WithCustomOcr, checkOcrServiceHealth } from '@/lib/customOcrService';

  // Enhanced inline document processing function with security
  async function processDocumentInline(documentId: string, fileContent: string, fileType: string) {
    try {
      console.log('üöÄ Processing document:', documentId);
      
      // Check if custom OCR service is available
      const useCustomOcr = import.meta.env.VITE_USE_CUSTOM_OCR === 'true';
      let extractedText = '';
      
      if (useCustomOcr) {
        // Use custom Python OCR service
        console.log('üîç Using custom Python OCR service...');
        try {
          const isHealthy = await checkOcrServiceHealth();
          if (!isHealthy) {
            throw new Error('Custom OCR service is not available');
          }
          
          // Determine filename from fileType
          const extension = fileType.split('/')[1] || 'png';
          const filename = `document_${documentId}.${extension}`;
          
          extractedText = await processBase64WithCustomOcr(
            fileContent,
            filename,
            'auto', // Let the service choose the best engine
            true    // Apply AI text cleaning
          );
          console.log('‚úÖ Custom OCR completed');
        } catch (customOcrError) {
          console.warn('‚ö†Ô∏è Custom OCR failed, falling back to OCR.space:', customOcrError);
          // Fall back to OCR.space if custom service fails
          const ocrConfig = config.getOcrConfig();
          if (!ocrConfig.primaryApiKey) {
            throw new Error('Both custom OCR and OCR.space are unavailable');
          }
          const ocrData = await callOcrWithRetry(fileContent, fileType, ocrConfig);
          if (!ocrData.ParsedResults || ocrData.ParsedResults.length === 0) {
            throw new Error('OCR failed to extract text from document');
          }
          extractedText = ocrData.ParsedResults[0].ParsedText;
        }
      } else {
        // Use OCR.space API (original implementation)
        console.log('üîç Using OCR.space API...');
        const ocrConfig = config.getOcrConfig();
        
        if (!ocrConfig.primaryApiKey) {
          throw new Error('OCR API key not configured. Please check environment variables.');
        }
        
        const ocrData = await callOcrWithRetry(fileContent, fileType, ocrConfig);
        console.log('üìù OCR response received');
        
        if (!ocrData.ParsedResults || ocrData.ParsedResults.length === 0) {
          throw new Error('OCR failed to extract text from document');
        }
        
        extractedText = ocrData.ParsedResults[0].ParsedText;
      }
      
      console.log('üìä Extracted text length:', extractedText.length);
      
      // Enhanced document type detection
      const documentType = detectDocumentType(extractedText);
      console.log('üìã Detected document type:', documentType);
      
      // Enhanced field extraction
      const extractedFields = extractFieldsFromText(extractedText, documentType);
      console.log('üìã Extracted fields:', extractedFields);
      
      // Calculate confidence score
      const confidence = calculateConfidenceScore(extractedText, extractedFields);
      
      // Update document in Supabase
      const { error } = await supabase
        .from('documents')
        .update({
          status: 'completed',
          extracted_data: {
            document_type: documentType,
            extracted_fields: extractedFields,
            raw_text: extractedText,
            confidence_score: confidence,
            processing_timestamp: new Date().toISOString()
          },
          ocr_confidence: confidence
        })
        .eq('id', documentId);
      
      if (error) {
        console.error('‚ùå Database update error:', error);
        throw new Error(`Database update failed: ${error.message}`);
      }
      
      console.log('‚úÖ Document processing completed successfully');
      return { 
        success: true, 
        data: { 
          documentType, 
          extractedFields, 
          extractedText,
          confidence,
          processingTime: Date.now() 
        } 
      };
      
    } catch (error) {
      console.error('‚ùå Error processing document:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown processing error',
        timestamp: new Date().toISOString()
      };
    }
  }

  // Enhanced OCR call with retry logic and fallback
  async function callOcrWithRetry(
    fileContent: string, 
    fileType: string, 
    ocrConfig: any,
    attempt: number = 1
  ): Promise<any> {
    const maxRetries = ocrConfig.maxRetries || 3;
    const timeout = 120000; // Increased timeout to 120 seconds for large files
    
    try {
      const apiKey = attempt === 1 ? ocrConfig.primaryApiKey : (ocrConfig.backupApiKey || ocrConfig.primaryApiKey);
      
      if (!apiKey) {
        throw new Error('No OCR API key configured');
      }
      
      console.log(`üîç OCR attempt ${attempt}/${maxRetries} with API key: ${apiKey.substring(0, 8)}...`);
      console.log(`üìä File type: ${fileType}, Base64 length: ${fileContent.length}`);
      
      // Create FormData with proper structure
      const ocrFormData = new FormData();
      ocrFormData.append('apikey', apiKey);
      ocrFormData.append('base64Image', `data:${fileType};base64,${fileContent}`);
      ocrFormData.append('language', 'tur');
      ocrFormData.append('isOverlayRequired', 'false');
      ocrFormData.append('detectOrientation', 'true');
      ocrFormData.append('scale', 'true');
      ocrFormData.append('OCREngine', '2');
      ocrFormData.append('filetype', fileType.split('/')[1] || 'jpg');
      
      console.log('üì§ Sending request to OCR.space API...');
      const startTime = Date.now();
      
      // Use XMLHttpRequest for better control and debugging
      const ocrData = await new Promise<any>((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        
        // Set timeout
        xhr.timeout = timeout;
        
        xhr.onload = function() {
          const responseTime = Date.now() - startTime;
          console.log(`üì• Received OCR response in ${responseTime}ms with status: ${xhr.status}`);
          
          if (xhr.status >= 200 && xhr.status < 300) {
            try {
              const data = JSON.parse(xhr.responseText);
              
              if (data.OCRExitCode === 1 || data.OCRExitCode === 2) {
                console.log(`‚úÖ OCR completed successfully in ${responseTime}ms`);
                resolve(data);
              } else {
                console.error('OCR processing failed with data:', data);
                reject(new Error(`OCR processing failed: ${data.ErrorMessage || data.ErrorDetails || `Exit code ${data.OCRExitCode}`}`));
              }
            } catch (parseError) {
              console.error('Failed to parse OCR response:', xhr.responseText);
              reject(new Error(`Failed to parse OCR response: ${parseError}`));
            }
          } else {
            console.error('OCR API error response:', xhr.responseText);
            reject(new Error(`OCR API returned ${xhr.status}: ${xhr.statusText}`));
          }
        };
        
        xhr.onerror = function() {
          console.error('Network error occurred while calling OCR API');
          reject(new Error('Network error: Unable to reach OCR.space API. Please check your internet connection.'));
        };
        
        xhr.ontimeout = function() {
          console.warn(`‚åõ OCR request timed out after ${timeout}ms`);
          reject(new Error(`Request timed out after ${timeout}ms`));
        };
        
        xhr.onprogress = function(e) {
          if (e.lengthComputable) {
            const percentComplete = (e.loaded / e.total) * 100;
            console.log(`üìä Upload progress: ${percentComplete.toFixed(1)}%`);
          }
        };
        
        // Open and send request
        xhr.open('POST', 'https://api.ocr.space/parse/image', true);
        xhr.send(ocrFormData);
      });
      
      return ocrData;
      
    } catch (error) {
      console.warn(`üü° OCR attempt ${attempt} failed:`, error);
      
      // Check if it's a network connectivity issue
      const isNetworkError = error instanceof Error && 
        (error.message.includes('Network error') || 
        error.message.includes('Failed to fetch') ||
        error.message.includes('Unable to reach'));
      
      if (isNetworkError && attempt === 1) {
        console.error('‚ö†Ô∏è Network connectivity issue detected. Possible causes:');
        console.error('  1. Firewall or antivirus blocking the request');
        console.error('  2. ISP or corporate proxy blocking OCR.space');
        console.error('  3. OCR.space API is down');
        console.error('  4. CORS policy blocking the request');
        console.error('üí° Solution: Consider using a Supabase Edge Function to proxy the request');
      }
      
      if (attempt < maxRetries) {
        const delay = Math.pow(2, attempt) * 1000; // Exponential backoff: 2s, 4s, 8s
        console.log(`‚è≥ Retrying OCR in ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
        return callOcrWithRetry(fileContent, fileType, ocrConfig, attempt + 1);
      }
      
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error(`‚ùå OCR failed after ${maxRetries} attempts:`, errorMessage);
      throw new Error(`OCR failed after ${maxRetries} attempts: ${errorMessage}`);
    }
  }

  // Enhanced document type detection for all insurance types
  function detectDocumentType(text: string): string {
    const textUpper = text.toUpperCase();
    
    // Comprehensive insurance type detection patterns
    const patterns = {
      'deprem': ['DEPREM', 'DASK', 'DOƒûAL AFET', 'EARTHQUAKE', 'Bƒ∞NA TEMƒ∞NATI'],
      'kasko': ['KASKO', 'MOTORLƒ∞ ARA√áLAR', 'OTO', 'VEHICLE', 'ARA√á', 'COMPREHENSIVE', 'GENƒ∞≈ûLETƒ∞LMƒ∞≈û KASKO', 'Bƒ∞RLE≈ûƒ∞K KASKO'],
      'trafik': ['TRAFƒ∞K', 'ZORUNLU', 'COMPULSORY', 'MOTOR', 'MALƒ∞ SORUMLULUK', 'THIRD PARTY'],
      'ferdi_kaza': ['FERDƒ∞ KAZA', 'PERSONAL ACCIDENT', 'KOLTUK FERDƒ∞ KAZA', 'FERTI KAZA', 'KAZA'],
      'hukuksal_koruma': ['HUKUKSAL KORUMA', 'LEGAL PROTECTION', 'HUKUKƒ∞ KORUMA', 'AVUKAT'],
      'saglik': ['SAƒûLIK', 'HEALTH', 'MEDƒ∞KAL', 'MEDICAL', 'HASTANE'],
      'hayat': ['HAYAT', 'LIFE', 'YA≈û', 'VEFAT', '√ñL√úM', 'DEATH'],
      'konut': ['KONUT', 'EV', 'HOME', 'HOUSE', 'DWELLING', 'KONUT Sƒ∞GORTASI'],
      'i≈üyeri': ['ƒ∞≈ûYERƒ∞', 'WORKPLACE', 'ƒ∞≈û YERƒ∞', 'Tƒ∞CARƒ∞', 'COMMERCIAL'],
      'nakliyat': ['NAKLƒ∞YAT', 'TRANSPORT', 'KARGO', 'LOJƒ∞STƒ∞K'],
      'makine': ['MAKƒ∞NE', 'MACHINE', 'TEKNƒ∞K', 'TECHNICAL'],
      'sorumluluk': ['SORUMLULUK', 'LIABILITY', 'MALƒ∞ SORUMLULUK', 'RESPONSIBILITY'],
      'yangin': ['YANGIN', 'FIRE', 'ATE≈û', 'YANMA'],
      'hirsizlik': ['HIRSIZLIK', 'THEFT', '√áALINMA', 'STEALING'],
      'teklif': ['TEKLƒ∞F', 'OFFER', 'PROPOSAL', 'Bƒ∞RLE≈ûƒ∞K KASKO Sƒ∞GORTA TEKLƒ∞Fƒ∞'],
      'police': ['POLƒ∞√áE', 'POLICY', 'Sƒ∞GORTA POLƒ∞√áESƒ∞', 'INSURANCE POLICY']
    };
    
    // Check for specific patterns first
    for (const [type, keywords] of Object.entries(patterns)) {
      if (keywords.some(keyword => textUpper.includes(keyword))) {
        console.log(`üìã Detected document type: ${type} (matched: ${keywords.find(k => textUpper.includes(k))})`);
        return type;
      }
    }
    
    // Fallback: Check for common insurance company names
    const companyPatterns = [
      'ANADOLU Sƒ∞GORTA', 'ALLIANZ', 'AK Sƒ∞GORTA', 'HALK Sƒ∞GORTA', 
      'ZURICH', 'HDI', 'MAPFRE', 'RAY Sƒ∞GORTA', 'NEVA Sƒ∞GORTA',
      'UNICO', 'AXA', 'GENERALI', 'LIBERTY'
    ];
    
    if (companyPatterns.some(company => textUpper.includes(company))) {
      console.log('üìã Detected insurance document by company name');
      return 'insurance_document';
    }
    
    console.log('üìã Document type: unknown');
    return 'unknown';
  }

  // Universal date extraction function
  function extractDates(text: string): { startDate: string | null; endDate: string | null; issueDate: string | null } {
    const startDate = extractStartDate(text);
    const endDate = extractEndDate(text);
    const issueDate = extractIssueDate(text);
    
    return { startDate, endDate, issueDate };
  }

  // Universal field extraction for all insurance types
  function extractFieldsFromText(text: string, documentType: string): any {
    const fields: any = {};
    const textUpper = text.toUpperCase();
    
    console.log(`üîç Extracting fields for document type: ${documentType}`);
    
    // Document-specific extraction logic
    if (documentType === 'deprem' || documentType === 'konut') {
      return extractDepremFields(text);
    } else if (['kasko', 'trafik', 'ferdi_kaza', 'hukuksal_koruma'].includes(documentType)) {
      return extractMotorFields(text);
    } else if (['saglik', 'hayat'].includes(documentType)) {
      return extractHealthLifeFields(text);
    } else {
      return extractUniversalFields(text, documentType);
    }
  }

  // DASK/Deprem specific field extraction
  function extractDepremFields(text: string): any {
    const fields: any = {};
    
    console.log('üè† Extracting DASK/Deprem specific fields');
    
    // Universal date extraction
    const dates = extractDates(text);
    fields.startDate = dates.startDate;
    fields.endDate = dates.endDate;
    fields.issueDate = dates.issueDate;
    fields.policyStartDate = dates.startDate;
    fields.policyEndDate = dates.endDate;
    fields.start_date = dates.startDate;
    fields.end_date = dates.endDate;
    fields.issue_date = dates.issueDate;
    
    // DASK specific policy number extraction
    const daskNo = extractDaskPolicyNumber(text);
    const insuranceCompanyPolicyNo = extractInsuranceCompanyPolicyNumber(text);
    
    fields.policy_number = daskNo;
    fields.policyNumber = daskNo;
    fields.daskPolicyNumber = daskNo;
    fields.insuranceCompanyPolicyNumber = insuranceCompanyPolicyNo;
    
    // Customer Information
    fields.insured_name = extractInsuredNameAdvanced(text);
    fields.customer_name = extractCustomerName(text);
    fields.policyholderName = extractPolicyHolderName(text);
    fields.tc_number = extractTCNumber(text);
    fields.tcNumber = extractTCNumber(text);
    fields.policyholderStatus = extractPolicyholderStatus(text);
    fields.policyholder_status = extractPolicyholderStatus(text);
    fields.policyholderPhone = extractPolicyholderPhone(text);
    fields.policyholder_phone = extractPolicyholderPhone(text);
    
    // Company Information
    fields.insurance_company = extractInsuranceCompany(text);
    fields.insuranceCompany = extractInsuranceCompany(text);
    fields.company_phone = extractCompanyPhone(text);
    fields.companyPhone = extractCompanyPhone(text);
    fields.company_address = extractCompanyAddress(text);
    fields.companyAddress = extractCompanyAddress(text);
    
    // Coverage Information
    fields.buildingCoverage = extractBuildingCoverage(text);
    fields.buildingCoverageAmount = extractBuildingCoverageAmount(text);
    
    // Financial Information
    fields.policyPremium = extractPolicyPremium(text);
    fields.policy_premium = extractPolicyPremium(text);
    fields.gross_premium = extractGrossPremium(text);
    fields.grossPremium = extractGrossPremium(text);
    fields.net_premium = extractNetPremium(text);
    fields.netPremium = extractNetPremium(text);
    fields.tax_amount = extractTaxAmount(text);
    fields.taxAmount = extractTaxAmount(text);
    
    // Agency Information
    fields.agencyNumber = extractAgencyNumber(text);
    fields.agency_number = extractAgencyNumber(text);
    fields.renewalNumber = extractRenewalNumber(text);
    fields.renewal_number = extractRenewalNumber(text);
    
    // Discount Information
    fields.discountSurchargeInfo = extractDiscountInfo(text);
    fields.discount_info = extractDiscountInfo(text);
    
    // Building Information (DASK specific)
    fields.buildingCode = extractBuildingCode(text);
    fields.building_code = extractBuildingCode(text);
    fields.addressCode = extractAddressCode(text);
    fields.address_code = extractAddressCode(text);
    fields.buildingType = extractBuildingTypeAdvanced(text);
    fields.building_type = extractBuildingTypeAdvanced(text);
    fields.buildingYear = extractBuildingYear(text);
    fields.building_year = extractBuildingYear(text);
    fields.apartmentArea = extractApartmentArea(text);
    fields.apartment_area = extractApartmentArea(text);
    fields.floorLocated = extractFloorLocation(text);
    fields.floor_located = extractFloorLocation(text);
    fields.damageStatus = extractDamageStatus(text);
    fields.damage_status = extractDamageStatus(text);
    fields.province = extractProvince(text);
    fields.insured_address = extractInsuredAddress(text);
    fields.insuredAddress = extractInsuredAddress(text);
    fields.insured_phone = extractInsuredPhone(text);
    fields.insuredPhone = extractInsuredPhone(text);
    
    console.log(`üìä Extracted ${Object.keys(fields).length} DASK fields`);
    return fields;
  }

  // Motor insurance specific field extraction
  function extractMotorFields(text: string): any {
    const fields: any = {};
    
    console.log('üöó Extracting Motor insurance specific fields');
    
    // Better OCR text cleaning - remove all special characters and normalize
    const cleanText = text
      .replace(/[√ß√á]/g, 'c')
      .replace(/[ƒüƒû]/g, 'g')
      .replace(/[ƒ±ƒ∞]/g, 'i')
      .replace(/[√∂√ñ]/g, 'o')
      .replace(/[≈ü≈û]/g, 's')
      .replace(/[√º√ú]/g, 'u')
      .replace(/\s+/g, ' ')
      .replace(/[^\w\s:\.\-\/]/g, ' ')
      .replace(/\s+/g, ' ');
    
    // Additional aggressive cleaning for customer names
    const aggressiveCleanText = text
      .replace(/[√ß√á]/g, 'c')
      .replace(/[ƒüƒû]/g, 'g')
      .replace(/[ƒ±ƒ∞]/g, 'i')
      .replace(/[√∂√ñ]/g, 'o')
      .replace(/[≈ü≈û]/g, 's')
      .replace(/[√º√ú]/g, 'u')
      .replace(/\s+/g, ' ')
      .replace(/[^\w\s:\.\-\/]/g, ' ')
      .replace(/\s+/g, ' ')
      // Fix common OCR errors in company names
      .replace(/\bC\s+Sm\b/g, 'CSM')
      .replace(/\bDem\s+I\s+R\b/g, 'DEMIR')
      .replace(/\bC\s+El\s+I\s+K\b/g, 'CELIK')
      .replace(/\bA\s+S\b/g, 'AS')
      .replace(/\s+/g, ' ');
    
    console.log('üßπ Cleaned text sample:', cleanText.substring(0, 200));
    
    // Simple pattern matching for key fields
    // Policy number - look for numbers after "Poli" or "Policy"
    const policyMatch = cleanText.match(/Poli.*?(\d{9,})/i);
    if (policyMatch) {
      fields.policy_number = policyMatch[1];
      fields.policyNumber = policyMatch[1];
      fields.insuranceCompanyPolicyNumber = policyMatch[1];
    }
    
    // Dates - look for date patterns
    const dateMatch = cleanText.match(/(\d{2}\/\d{2}\/\d{4})-(\d{2}\/\d{2}\/\d{4})/);
    if (dateMatch) {
      fields.startDate = dateMatch[1];
      fields.endDate = dateMatch[2];
      fields.start_date = dateMatch[1];
      fields.end_date = dateMatch[2];
      fields.policyStartDate = dateMatch[1];
      fields.policyEndDate = dateMatch[2];
    }
    
    const issueDateMatch = cleanText.match(/(\d{2}\/\d{2}\/\d{4})/);
    if (issueDateMatch) {
      fields.issueDate = issueDateMatch[1];
      fields.issue_date = issueDateMatch[1];
    }
    
    // Agency code - look for numbers after "Acente"
    const agencyMatch = cleanText.match(/Acente.*?(\d{6})/i);
    if (agencyMatch) {
      fields.agencyNumber = agencyMatch[1];
      fields.agency_number = agencyMatch[1];
    }
    
    // Customer Information - Kasko specific extraction
    const kaskoCustomerName = extractKaskoCustomerName(text);
    fields.insured_name = kaskoCustomerName;
    fields.customer_name = kaskoCustomerName;
    fields.policyholderName = kaskoCustomerName;
    fields.policyholder_name = kaskoCustomerName;
    fields.customerName = kaskoCustomerName;
    fields.insuredName = kaskoCustomerName;
    
    // Insurance company - look for text after "Sigorta" and "Sirketi"
    const companyMatch1 = cleanText.match(/Sigorta.*?Sirketi.*?Unvani.*?:\s*([A-Z\s\.√áƒûIƒ∞√ñ≈û√ú]+)/i);
    const companyMatch2 = cleanText.match(/Sigorta.*?Sirketi.*?:\s*([A-Z\s\.√áƒûIƒ∞√ñ≈û√ú]+)/i);
    const companyMatch = companyMatch1 || companyMatch2;
    
    if (companyMatch) {
      const company = companyMatch[1].trim();
      if (company && company.length > 5) {
        fields.insurance_company = company;
        fields.insuranceCompany = company;
      }
    }
    
    // Alternative insurance company extraction - look for "ANADOLU" or other known companies
    // First check for known companies in the text (handle OCR errors - no spaces)
    const knownCompanies = [
      { pattern: /anadolu\s*anonim\s*t[ƒ±u]rk\s*sigorta\s*[≈üs]irketi/i, name: 'ANADOLU ANONƒ∞M T√úRK Sƒ∞GORTA ≈ûƒ∞RKETƒ∞' },
      { pattern: /anadoluanonim\s*trk\s*sigorta[≈üs]irketi/i, name: 'ANADOLU ANONƒ∞M T√úRK Sƒ∞GORTA ≈ûƒ∞RKETƒ∞' },
      { pattern: /anadolu\s*sigorta/i, name: 'ANADOLU ANONƒ∞M T√úRK Sƒ∞GORTA ≈ûƒ∞RKETƒ∞' },
      { pattern: /unico\s*sigorta/i, name: 'UNICO SIGORTA' },
      { pattern: /allianz/i, name: 'ALLIANZ' },
      { pattern: /axa\s*sigorta/i, name: 'AXA Sƒ∞GORTA' }
    ];
    
    for (const { pattern, name } of knownCompanies) {
      if (pattern.test(text)) {
        fields.insurance_company = name;
        fields.insuranceCompany = name;
        break;
      }
    }
    
    // If not found, try generic patterns (but skip vehicle models)
    if (!fields.insurance_company) {
      const companyPatterns = [
        /sigorta\s*[≈üs]irketi\s*unvan[ƒ±i]?\s*:?\s*([a-z√ßƒüƒ±i√∂≈ü√º\s\.]+)/i
      ];
      
      for (const pattern of companyPatterns) {
        const knownCompanyMatch = text.match(pattern);
        if (knownCompanyMatch && knownCompanyMatch[1]) {
          let company = knownCompanyMatch[1].trim();
          // Skip if it looks like a vehicle model (contains numbers, "touch", "dci", etc.)
          if (/\d+\.\d+|touch|dci|edc|hb|tsi|tfsi|clio|renault|ford|fiat/i.test(company)) {
            continue;
          }
          if (company && company.length > 5 && company.length < 100) {
            fields.insurance_company = company.toUpperCase();
            fields.insuranceCompany = company.toUpperCase();
            break;
          }
        }
      }
    }
    
    // Phone number - look for phone pattern
    const phoneMatch = cleanText.match(/(\d{3}\s\d{3}\s\d{4})/);
    if (phoneMatch) {
      fields.company_phone = phoneMatch[1];
      fields.companyPhone = phoneMatch[1];
    }
    
    // Premium amounts - look for amounts with commas
    const premiumMatch = cleanText.match(/Odenecek.*?Tutar.*?(\d{1,3},\d{2})/i);
    if (premiumMatch) {
      fields.policyPremium = premiumMatch[1];
      fields.policy_premium = premiumMatch[1];
    }
    
    const netPremiumMatch = cleanText.match(/Vergi.*?Prim.*?(\d{1,3},\d{2})/i);
    if (netPremiumMatch) {
      fields.netPremium = netPremiumMatch[1];
      fields.net_premium = netPremiumMatch[1];
    }
    
    const taxMatch = cleanText.match(/BSMV.*?(\d{1,3},\d{2})/i);
    if (taxMatch) {
      fields.taxAmount = taxMatch[1];
      fields.tax_amount = taxMatch[1];
    }
    
    // Additional premium extraction patterns
    const grossPremiumMatch = cleanText.match(/Gross.*?Premium.*?(\d{1,3},\d{2})/i);
    if (grossPremiumMatch) {
      fields.grossPremium = grossPremiumMatch[1];
      fields.gross_premium = grossPremiumMatch[1];
    }
    
    // Vehicle Information (Motor specific) - use simple patterns
    // Plaka pattern - handles formats like "to8611-b9um" or "08 ABC 1234"
    const platePatterns = [
      // Pattern 1: "plaka" followed by plate number
      /plaka[:\s]+([a-z0-9\-]+)/i,
      // Pattern 2: Specific format like "to8611-b9um" (2 letters, 4-5 digits, letter, digit, 2-3 letters)
      /\b([a-z]{1,2}\d{4,5}[\-\s]?[a-z]\d[a-z]{2,3})\b/i,
      // Pattern 3: Standard Turkish plate format (34 ABC 1234)
      /\b(\d{2}\s?[A-Z]{1,3}\s?\d{2,4})\b/
    ];
    
    for (const pattern of platePatterns) {
      const plateMatch = text.match(pattern);
      if (plateMatch && plateMatch[1]) {
        let plate = plateMatch[1].trim().toUpperCase().replace(/[-\s]/g, '');
        // Skip if it's a common word like "SIGORTA"
        if (plate.length > 15 || /^[A-Z]{6,}$/.test(plate)) {
          continue;
        }
        // Fix OCR errors: TO -> 0, O -> 0 at start
        plate = plate.replace(/^TO/, '0').replace(/^O/, '0');
        // Validate plate format (should have mix of letters and numbers)
        if (/\d/.test(plate) && /[A-Z]/.test(plate)) {
          fields.vehicle_plate = plate;
          fields.vehiclePlate = plate;
          fields.plate_number = plate;
          break;
        }
      }
    }
    
    const brandMatch = cleanText.match(/Marka.*?([A-Z\s0-9\(\)]+)/i);
    if (brandMatch) {
      const brand = brandMatch[1].trim();
      if (brand && brand.length > 2) {
        fields.vehicle_brand = brand;
        fields.vehicleBrand = brand;
      }
    }
    
    const modelMatch = cleanText.match(/Model.*?([A-Z\s0-9\.]+)/i);
    if (modelMatch) {
      const model = modelMatch[1].trim();
      if (model && model.length > 2) {
        fields.vehicle_model = model;
        fields.vehicleModel = model;
      }
    }
    
    const yearMatch = cleanText.match(/Model.*?Yili.*?(\d{4})/i);
    if (yearMatch) {
      fields.vehicle_year = yearMatch[1];
      fields.vehicleYear = yearMatch[1];
    }
    
    // ≈ûasi No - handles formats like "vf15r436d62350356"
    const chassisPatterns = [
      /[≈üs]asi[:\s]*no[:\s]*([a-z0-9]{17})/i,
      /[≈üs]asi[:\s]*([a-z0-9]{17})/i,
      /\b([a-z]{2}\d{2}[a-z]\d{3}[a-z]\d{8})\b/i  // VIN format
    ];
    
    for (const pattern of chassisPatterns) {
      const chassisMatch = text.match(pattern);
      if (chassisMatch && chassisMatch[1]) {
        fields.vehicle_chassis = chassisMatch[1].toUpperCase();
        fields.vehicleChassis = chassisMatch[1].toUpperCase();
        fields.chassis_number = chassisMatch[1].toUpperCase();
        break;
      }
    }
    
    // Motor No - handles formats like "k9ke629r035133"
    const motorPatterns = [
      /motor[:\s]*no[:\s]*([a-z0-9]{10,})/i,
      /motor[:\s]*([a-z0-9]{10,})/i,
      /\b([a-z]\d[a-z]{2}\d{3}[a-z]\d{6})\b/i  // Motor number format
    ];
    
    for (const pattern of motorPatterns) {
      const motorMatch = text.match(pattern);
      if (motorMatch && motorMatch[1]) {
        fields.vehicle_motor = motorMatch[1].toUpperCase();
        fields.vehicleMotor = motorMatch[1].toUpperCase();
        fields.motor_number = motorMatch[1].toUpperCase();
        break;
      }
    }
    
    // Additional fields using existing functions
    fields.tc_number = extractTCNumber(text);
    fields.tcNumber = extractTCNumber(text);
    fields.policyholderStatus = extractPolicyholderStatus(text);
    fields.policyholder_status = extractPolicyholderStatus(text);
    fields.policyholderPhone = extractPolicyholderPhone(text);
    fields.policyholder_phone = extractPolicyholderPhone(text);
    
    fields.company_address = extractCompanyAddress(text);
    fields.companyAddress = extractCompanyAddress(text);
    
    fields.gross_premium = extractGrossPremium(text);
    fields.grossPremium = extractGrossPremium(text);
    
    fields.discountSurchargeInfo = extractDiscountInfo(text);
    fields.discount_info = extractDiscountInfo(text);
    
    fields.vehicle_value = extractVehicleValue(text);
    fields.vehicleValue = extractVehicleValue(text);
    fields.kasko_premium = extractKaskoPremium(text);
    fields.kaskoPremium = extractKaskoPremium(text);
    fields.mali_sorumluluk = extractMaliSorumluluk(text);
    fields.maliSorumluluk = extractMaliSorumluluk(text);
    fields.ferdi_kaza = extractFerdiKaza(text);
    fields.ferdiKaza = extractFerdiKaza(text);
    fields.hukuksal_koruma = extractHuksalKoruma(text);
    fields.huksalKoruma = extractHuksalKoruma(text);
    
    console.log(`üìä Extracted ${Object.keys(fields).length} Motor fields`);
    return fields;
  }

  // Health/Life insurance specific field extraction
  function extractHealthLifeFields(text: string): any {
    const fields: any = {};
    
    console.log('üè• Extracting Health/Life insurance specific fields');
    
    // Universal date extraction
    const dates = extractDates(text);
    fields.startDate = dates.startDate;
    fields.endDate = dates.endDate;
    fields.issueDate = dates.issueDate;
    fields.policyStartDate = dates.startDate;
    fields.policyEndDate = dates.endDate;
    fields.start_date = dates.startDate;
    fields.end_date = dates.endDate;
    fields.issue_date = dates.issueDate;
    
    // Policy Information
    const daskNo = extractDaskPolicyNumber(text);
    const insuranceCompanyPolicyNo = extractInsuranceCompanyPolicyNumber(text);
    
    fields.policy_number = insuranceCompanyPolicyNo || daskNo;
    fields.policyNumber = insuranceCompanyPolicyNo || daskNo;
    fields.daskPolicyNumber = daskNo;
    fields.insuranceCompanyPolicyNumber = insuranceCompanyPolicyNo;
    
    // Customer Information
    fields.insured_name = extractInsuredNameAdvanced(text);
    fields.customer_name = extractCustomerName(text);
    fields.policyholderName = extractPolicyHolderName(text);
    fields.tc_number = extractTCNumber(text);
    fields.tcNumber = extractTCNumber(text);
    fields.policyholderStatus = extractPolicyholderStatus(text);
    fields.policyholder_status = extractPolicyholderStatus(text);
    fields.policyholderPhone = extractPolicyholderPhone(text);
    fields.policyholder_phone = extractPolicyholderPhone(text);
    
    // Company Information
    fields.insurance_company = extractInsuranceCompany(text);
    fields.insuranceCompany = extractInsuranceCompany(text);
    fields.company_phone = extractCompanyPhone(text);
    fields.companyPhone = extractCompanyPhone(text);
    fields.company_address = extractCompanyAddress(text);
    fields.companyAddress = extractCompanyAddress(text);
    
    // Financial Information
    fields.policyPremium = extractPolicyPremium(text);
    fields.policy_premium = extractPolicyPremium(text);
    fields.gross_premium = extractGrossPremium(text);
    fields.grossPremium = extractGrossPremium(text);
    fields.net_premium = extractNetPremium(text);
    fields.netPremium = extractNetPremium(text);
    fields.tax_amount = extractTaxAmount(text);
    fields.taxAmount = extractTaxAmount(text);
    
    // Agency Information
    fields.agencyNumber = extractAgencyNumber(text);
    fields.agency_number = extractAgencyNumber(text);
    fields.renewalNumber = extractRenewalNumber(text);
    fields.renewal_number = extractRenewalNumber(text);
    
    // Discount Information
    fields.discountSurchargeInfo = extractDiscountInfo(text);
    fields.discount_info = extractDiscountInfo(text);
    
    console.log(`üìä Extracted ${Object.keys(fields).length} Health/Life fields`);
    return fields;
  }

  // Universal field extraction for unknown document types
  function extractUniversalFields(text: string, documentType: string): any {
    const fields: any = {};
    const textUpper = text.toUpperCase();
    
    console.log(`üîç Extracting universal fields for document type: ${documentType}`);
    
    // Universal date extraction
    const dates = extractDates(text);
    fields.startDate = dates.startDate;
    fields.endDate = dates.endDate;
    fields.issueDate = dates.issueDate;
    fields.policyStartDate = dates.startDate;
    fields.policyEndDate = dates.endDate;
    fields.start_date = dates.startDate;
    fields.end_date = dates.endDate;
    fields.issue_date = dates.issueDate;
    
    // Universal policy/document number extraction
    const policyPatterns = [
      /(?:poli√ße|policy|police)\s*(?:no|numarasƒ±|numara)?\s*:?\s*([A-Z0-9\-]+)/gi,
      /(?:teklif|offer)\s*(?:no|numarasƒ±|numara)?\s*:?\s*([A-Z0-9\-]+)/gi,
      /(?:belge|document)\s*(?:no|numarasƒ±|numara)?\s*:?\s*([A-Z0-9\-]+)/gi,
      /(?:revizyon|revision)\s*(?:no|numarasƒ±|numara)?\s*:?\s*([A-Z0-9\-]+)/gi,
      /(?:dask|daskpoliceno)\s*(?:no|numarasƒ±|numara)?\s*:?\s*([A-Z0-9\-]+)/gi,
      /(?:kasko|kaskopoliceno)\s*(?:no|numarasƒ±|numara)?\s*:?\s*([A-Z0-9\-]+)/gi
    ];
    
    for (const pattern of policyPatterns) {
      const match = pattern.exec(text);
      if (match) {
        fields.policyNumber = match[1].trim();
        fields.policy_number = match[1].trim();
        break;
      }
    }
    
    // Universal customer/insured information extraction
    const customerPatterns = [
      /(?:m√º≈üteri|customer|sigortalƒ±|insured)\s*(?:adƒ±|name|adƒ±\/unvanƒ±)?\s*:?\s*([A-Z√áƒûIƒ∞√ñ≈û√ú\s\.]+)/gi,
      /(?:ad\s+soyad|name|ad\s+soyad\/unvan)\s*:?\s*([A-Z√áƒûIƒ∞√ñ≈û√ú\s\.]+)/gi,
      /(?:menfaat\s+sahibi|beneficiary)\s*(?:adƒ±|name)?\s*:?\s*([A-Z√áƒûIƒ∞√ñ≈û√ú\s\.]+)/gi,
      /(?:ruhsat\s+sahibi|owner)\s*(?:adƒ±|name)?\s*:?\s*([A-Z√áƒûIƒ∞√ñ≈û√ú\s\.]+)/gi
    ];
    
    for (const pattern of customerPatterns) {
      const match = pattern.exec(text);
      if (match) {
        // Use the first capture group if available, otherwise use the full match
        const name = (match[1] || match[0]).trim();

        // Validate name format and filter out unwanted patterns
        if (name && 
            name.length > 4 && // Minimum reasonable name length
            name.split(' ').length >= 2 && // At least first and last name
            !excludePatterns.some(regex => regex.test(name)) &&
            !/\d/.test(name) && // No numbers in names
            /^[A-Z√áƒûIƒ∞√ñ≈û√ú\s]+$/.test(name)) { // Only Turkish uppercase letters and spaces

          // Additional validation: Check if the name contains at least one Turkish character
          // to avoid matching section headers or other text
          if (/[√áƒûIƒ∞√ñ≈û√ú]/.test(name)) {
            fields.customerName = name;
            fields.customer_name = name;
            fields.insuredName = name;
            fields.insured_name = name;
            fields.policyholderName = name;
            fields.policyholder_name = name;
            break;
          }
        }
      }
    }
    
    // Universal TC number extraction
    const tcPatterns = [
      /(?:tc|t\.c\.|kimlik)\s*(?:no|numarasƒ±|numara)?\s*:?\s*(\d{11}|\d{3}\*{8}\d{2})/gi,
      /(?:tc\s+kimlik|kimlik\s+no)\s*:?\s*(\d{11}|\d{3}\*{8}\d{2})/gi
    ];
    
    for (const pattern of tcPatterns) {
      const match = pattern.exec(text);
      if (match) {
        fields.tcNumber = match[1].trim();
        fields.tc_number = match[1].trim();
        break;
      }
    }
    
    // Universal phone number extraction
    const phonePatterns = [
      /(?:telefon|phone|tel)\s*(?:no|numarasƒ±|numara)?\s*:?\s*([0-9\s\-\(\)]+)/gi,
      /(?:cep|mobile|gsm)\s*(?:no|numarasƒ±|numara)?\s*:?\s*([0-9\s\-\(\)]+)/gi,
      /(?:t:|f:)\s*([0-9\s\-\(\)]+)/gi
    ];
    
    for (const pattern of phonePatterns) {
      const match = pattern.exec(text);
      if (match) {
        const phone = match[1].trim();
        if (phone && phone.length > 5) {
          fields.phoneNumber = phone;
          fields.phone_number = phone;
          fields.insuredPhone = phone;
          fields.insured_phone = phone;
          fields.policyholderPhone = phone;
          fields.policyholder_phone = phone;
          break;
        }
      }
    }
    
    // Universal insurance company extraction
    const companyPatterns = [
      /(?:sigorta|insurance)\s*(?:≈üirketi|company|unvanƒ±)?\s*:?\s*([A-Z√áƒûIƒ∞√ñ≈û√ú\s\.]+)/gi,
      /(?:≈üirket|company)\s*(?:adƒ±|name|unvanƒ±)?\s*:?\s*([A-Z√áƒûIƒ∞√ñ≈û√ú\s\.]+)/gi,
      /(?:anadolu|allianz|ak\s+sigorta|halk\s+sigorta|zurich|hdi|mapfre|ray\s+sigorta|neva\s+sigorta|unico|axa|generali|liberty)\s*[A-Z√áƒûIƒ∞√ñ≈û√ú\s\.]*/gi
    ];
    
    for (const pattern of companyPatterns) {
      const match = pattern.exec(text);
      if (match) {
        const company = match[1] || match[0];
        if (company && company.length > 5) {
          fields.insuranceCompany = company.trim();
          fields.insurance_company = company.trim();
          break;
        }
      }
    }
    
    // Universal premium/amount extraction
    const amountPatterns = [
      /(?:prim|premium)\s*(?:tutarƒ±|amount|tl)?\s*:?\s*([0-9,\.]+)\s*(?:tl|‚Ç∫)?/gi,
      /(?:√∂denecek|payable)\s*(?:tutar|amount)?\s*:?\s*([0-9,\.]+)\s*(?:tl|‚Ç∫)?/gi,
      /(?:toplam|total)\s*(?:tutar|amount)?\s*:?\s*([0-9,\.]+)\s*(?:tl|‚Ç∫)?/gi,
      /(?:vergi\s+√∂ncesi|before\s+tax)\s*(?:prim|premium)?\s*:?\s*([0-9,\.]+)\s*(?:tl|‚Ç∫)?/gi,
      /(?:bsmv|tax)\s*:?\s*([0-9,\.]+)\s*(?:tl|‚Ç∫)?/gi
    ];
    
    for (const pattern of amountPatterns) {
      const match = pattern.exec(text);
      if (match) {
        const amount = match[1].trim();
        if (amount && amount.length > 0) {
          fields.premiumAmount = amount;
          fields.premium_amount = amount;
          fields.policyPremium = amount;
          fields.policy_premium = amount;
          fields.netPremium = amount;
          fields.net_premium = amount;
          break;
        }
      }
    }
    
    console.log(`üìä Extracted ${Object.keys(fields).length} universal fields`);
    return fields;
  }

  // Clean extracted fields for database storage
  function cleanExtractedFields(fields: any): any {
    const cleaned: any = {};
    
    for (const [key, value] of Object.entries(fields)) {
      if (value === null || value === undefined) {
        // Convert null/undefined to empty string for database compatibility
        cleaned[key] = '';
        continue;
      }
      
      if (typeof value === 'string') {
        // Clean string values
        const cleanedValue = value.trim();
        // Keep the value even if it's empty, but limit length
        cleaned[key] = cleanedValue.length > 1000 ? cleanedValue.substring(0, 1000) : cleanedValue;
      } else if (typeof value === 'number') {
        // Ensure numbers are valid
        if (isFinite(value)) {
          cleaned[key] = value;
        } else {
          cleaned[key] = '';
        }
      } else if (typeof value === 'boolean') {
        cleaned[key] = value;
      } else if (Array.isArray(value)) {
        // Clean arrays
        const cleanedArray = value
          .filter(item => item !== null && item !== undefined)
          .map(item => typeof item === 'string' ? item.trim() : item)
          .filter(item => item !== '');
        
        cleaned[key] = cleanedArray.length > 0 ? cleanedArray : [];
      } else if (typeof value === 'object') {
        // Clean nested objects recursively
        const cleanedObject = cleanExtractedFields(value);
        cleaned[key] = cleanedObject;
      } else {
        // For any other type, convert to string
        cleaned[key] = String(value);
      }
    }
    
    return cleaned;
  }

  // Professional confidence scoring based on extraction quality
  function calculateConfidenceScore(text: string, fields: any): number {
    let score = 0.3; // Base score
    
    // Text quality indicators
    if (text.length > 500) score += 0.15;
    if (text.length > 1000) score += 0.15;
    if (text.length > 1500) score += 0.1;
    
    // Critical field extraction success (higher weight)
    if (fields.policy_number || fields.daskPolicyNumber) score += 0.15;
    if (fields.insured_name || fields.policyholderName || fields.customer_name) score += 0.15;
    if (fields.insuranceCompany) score += 0.1;
    if (fields.startDate || fields.endDate) score += 0.1;
    if (fields.policyPremium) score += 0.08;
    
    // Document type specific bonuses
    if (fields.buildingCoverage && fields.buildingCoverageAmount) score += 0.1;
    if (fields.addressCode && fields.buildingCode) score += 0.05;
    if (fields.buildingType && fields.buildingYear) score += 0.05;
    
    // Text pattern quality indicators
    const hasStructuredData = text.includes(':') && text.includes('\t');
    if (hasStructuredData) score += 0.05;
    
    const hasDatePatterns = /[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{4}/.test(text);
    if (hasDatePatterns) score += 0.03;
    
    const hasAmountPatterns = /[\d\.,]+/.test(text);
    if (hasAmountPatterns) score += 0.03;
    
    // Field extraction success rate
    const totalFields = Object.keys(fields).length;
    const extractedFields = Object.values(fields).filter(value => 
      value !== null && value !== undefined && value !== ''
    ).length;
    
    if (totalFields > 0) {
      const extractionRate = extractedFields / totalFields;
      score += extractionRate * 0.15;
    }
    
    // Normalize score to realistic range (30% - 99.99%)
    return Math.min(Math.max(score, 0.30), 0.9999);
  }

  // ADVANCED FIELD EXTRACTION FUNCTIONS - RESTORED FROM WORKING VERSION

  function extractInsuranceCompanyPolicyNumber(text: string): string | null {
    const patterns = [
      // Pattern 1: "Sigorta ≈ûirketi Poli√ße No" with multiple lines then ":180938592"
      /Sigorta\s+[≈ûS]irketi\s+Poli[√ßc]e\s+No\s*\n[\s\S]{0,100}?:(\d{8,10})/i,
      // Pattern 2: Direct match
      /Sigorta\s+[≈ûS]irketi\s+Poli[√ßc]e\s+No\s*:?\s*(\d{8,10})/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const policyNumber = match[1].trim();
        // Validation for policy numbers (typically 5+ digits)
        if (policyNumber.length >= 5 && /^\d+$/.test(policyNumber)) {
          return policyNumber;
        }
      }
    }
    
    return null;
  }

  function extractDaskPolicyNumber(text: string): string | null {
    const patterns = [
      // Pattern 1: DASK Poli√ße No with colon and number
      /DASK\s*Poli[√ßc]e\s*No\s*:?\s*(\d{7,10})/i,
      // Pattern 2: daskpollgs no pattern (OCR error) - look for number after "no"
      /daskpoll[a-z]*\s*no[\s\S]{0,20}?(\d{7,8})/i,
      // Pattern 3: Just the number after DASK context
      /DASK[\s\S]{0,50}?(\d{8,10})/i,
      // Pattern 4: At document start
      /^[\s\S]{0,100}DASK[\s\S]{0,50}?(\d{8,10})/im,
      // Pattern 5: Standalone 8-digit number starting with 0 (OCR error for 8)
      /\b(0\d{7})\b/
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        let daskNo = match[1].trim();
        // If OCR wrote 0 instead of 8 at start (04922504 -> 84922504)
        if (daskNo.length === 8 && daskNo.startsWith('0') && daskNo[1] === '4') {
          daskNo = '8' + daskNo.substring(1);
        }
        // If OCR missed leading 8, add it for 7-digit numbers starting with 4
        else if (daskNo.length === 7 && daskNo.startsWith('4')) {
          daskNo = '8' + daskNo;
        }
        // DASK policy numbers are typically 8 digits
        if (daskNo.length === 8 && /^\d+$/.test(daskNo)) {
          return daskNo;
        }
      }
    }
    
    return null;
  }

  function extractInsuredNameAdvanced(text: string): string | null {
    const patterns = [
      // Pattern 1: "Adƒ± Soyadƒ±/Unvanƒ±" followed by name on next line (SIGORTA ETTIREN)
      /Ad[ƒ±i]\s+Soyad[ƒ±i]\s*\/\s*Unvan[ƒ±i]?\s*\n\s*([A-Z√áƒûIƒ∞√ñ≈û√ú]+\s+[A-Z√áƒûIƒ∞√ñ≈û√ú]+)\s*\n\s*TCKN/im,
      // Pattern 2: In SIGORTALI BILGILERI section with colon
      /S[Iƒ∞ƒ™]GORTALI\s+B[Iƒ∞ƒ™]LG[Iƒ∞ƒ™]LER[Iƒ∞ƒ™][\s\S]{0,100}?Ad[ƒ±i]\s+Soyad[ƒ±i]\s*\/\s*Unvan[ƒ±i]?\s*\n\s*:([A-Z√áƒûIƒ∞√ñ≈û√ú]+\s+[A-Z√áƒûIƒ∞√ñ≈û√ú]+)/im
    ];

    // Common false positives to exclude
    const excludePatterns = [
      'BILGILERI', 'BILGI', 'TCKN', 'VKN', 'YKN', 'T.C.', 'KIMLIK', 'Kƒ∞MLƒ∞K',
      'Sƒ∞GORTA', 'SIGORTA', 'POLƒ∞√áE', 'POLICE', 'NO:', 'TARIH', 'TARIHI', 'DOƒûUM',
      'DOGUM', 'ADRES', 'TELEFON', 'E-POSTA', 'EPOSTA', 'E[\s\.]*MAIL', 'ƒ∞L√áE', 'ILCE',
      'ƒ∞L', 'IL', 'VERGƒ∞', 'VERGI', 'DAƒ∞RE', 'DAIRE', 'KAT', 'NO', 'DAƒ∞RE NO', 'DAƒ∞RE NO'
    ];

    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match) {
        // Use the first capture group if available, otherwise use the full match
        const name = (match[1] || match[0]).trim();

        // Validate name format and filter out unwanted patterns
        if (name && 
            name.length > 4 && // Minimum reasonable name length
            name.split(' ').length >= 2 && // At least first and last name
            !excludePatterns.some(term => name.includes(term)) &&
            !/\d/.test(name) && // No numbers in names
            /^[A-Z√áƒûIƒ∞√ñ≈û√ú\s]+$/.test(name)) { // Only Turkish uppercase letters and spaces

          // Additional validation: Check if the name contains at least one Turkish character
          // to avoid matching section headers or other text
          if (/[√áƒûIƒ∞√ñ≈û√ú]/.test(name)) {
            return name;
          }
        }
      }
    }

    return null;
  }

  function extractPolicyHolderName(text: string): string | null {
    const patterns = [
      // Pattern 1: "Adƒ± Soyadƒ±/Unvanƒ±" in SIGORTA ETTIREN section - name on next line
      /S[Iƒ∞ƒ™]GORTA\s+ETT[Iƒ∞ƒ™]REN\s+B[Iƒ∞ƒ™]LG[Iƒ∞ƒ™]LER[Iƒ∞ƒ™][\s\S]{0,100}?Ad[ƒ±i]\s+Soyad[ƒ±i]\s*\/\s*Unvan[ƒ±i]?\s*\n\s*([A-Z√áƒûIƒ∞√ñ≈û√ú]+\s+[A-Z√áƒûIƒ∞√ñ≈û√ú]+)\s*\n\s*TCKN/im
    ];

    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const name = match[1].trim();
        // Validate name format and filter out unwanted patterns
        if (name.length > 2 && 
            !name.includes('BILGILERI') && 
            !name.includes('TCKN') &&
            !name.includes('VKN') &&
            !name.includes('YKN') &&
            /^[A-Z√áƒûIƒ∞√ñ≈û√ú\s]+$/.test(name)) {
          return name;
        }
      }
    }

    return null;
  }

  function extractCustomerName(text: string): string | null {
    // Try policyholder first, then insured
    return extractPolicyHolderName(text) || extractInsuredNameAdvanced(text);
  }

  // Kasko specific customer name extraction
  function extractKaskoCustomerName(text: string): string | null {
    console.log('üöó Extracting Kasko customer name');
    
    // Clean the text for better pattern matching - Keep Turkish characters
    const cleanText = text
      .replace(/\s+/g, ' ')
      .replace(/[^\w\s:\.\-\/√ß√áƒüƒûƒ±ƒ∞√∂√ñ≈ü≈û√º√ú]/g, ' ')
      .replace(/\s+/g, ' ');
    
    // Also create a normalized version for pattern matching
    const normalizedText = text
      .replace(/[√ß√á]/g, 'c')
      .replace(/[ƒüƒû]/g, 'g')
      .replace(/[ƒ±ƒ∞]/g, 'i')
      .replace(/[√∂√ñ]/g, 'o')
      .replace(/[≈ü≈û]/g, 's')
      .replace(/[√º√ú]/g, 'u')
      .replace(/\s+/g, ' ')
      .replace(/[^\w\s:\.\-\/]/g, ' ')
      .replace(/\s+/g, ' ');
    
    console.log('üßπ Cleaned text sample:', cleanText.substring(0, 300));
    console.log('üîç Looking for patterns in OCR text...');
    
    // Debug: Show all potential matches in both texts
    const debugPatterns = [
      /Sigortalƒ±.*?Adƒ±.*?Unvanƒ±/i,
      /Sigortali.*?Adi.*?Unvani/i,
      /USLU/i,
      /A\.≈û\./i
    ];
    
    console.log('üîç Testing patterns in clean text:');
    debugPatterns.forEach((pattern, index) => {
      const match = cleanText.match(pattern);
      console.log(`üîç Clean pattern ${index + 1}:`, pattern, '‚Üí', match);
    });
    
    console.log('üîç Testing patterns in normalized text:');
    debugPatterns.forEach((pattern, index) => {
      const match = normalizedText.match(pattern);
      console.log(`üîç Normalized pattern ${index + 1}:`, pattern, '‚Üí', match);
    });
    
    // ULTRA SIMPLE PATTERN: Just look for "USLU" followed by company name
    // OCR text: "USLU   √á SM DEM ƒ∞ R   √á EL ƒ∞ K A. ≈û ."
    const ultraSimplePattern = /USLU\s+[A-Z\s√áƒûIƒ∞√ñ≈û√ú\.\s]+A\.\s*≈û\.?\s*/i;
    const ultraSimpleMatch = text.match(ultraSimplePattern);
    
    console.log('üîç DEBUG: Ultra Simple Pattern test:', ultraSimplePattern);
    console.log('üîç DEBUG: Ultra Simple Match result:', ultraSimpleMatch);
    
    if (ultraSimpleMatch) {
      let name = ultraSimpleMatch[0].trim();
      
      // Clean OCR errors
      name = name
        .replace(/\s+C\s+Sm\s+/g, ' √áSM ')
        .replace(/\s+Dem\s+I\s+R\s+/g, ' DEMƒ∞R ')
        .replace(/\s+C\s+El\s+I\s+K\s+/g, ' √áELƒ∞K ')
        .replace(/\s+A\s+S\s*$/g, ' A.≈û.')
        .replace(/\s+A\.\s*≈û\.?\s*$/g, ' A.≈û.')
        .replace(/\s+/g, ' ')
        .trim();
      
      if (name && name.length > 5) {
        console.log('‚úÖ Found customer name (ULTRA SIMPLE PATTERN):', name);
        return name;
      }
    }
    
    // SUPER SIMPLE: Just extract everything after "USLU" until "A.≈û."
    const superSimplePattern = /USLU\s+(.*?)\s*A\.\s*≈û\.?\s*/i;
    const superSimpleMatch = text.match(superSimplePattern);
    
    console.log('üîç DEBUG: Super Simple Pattern test:', superSimplePattern);
    console.log('üîç DEBUG: Super Simple Match result:', superSimpleMatch);
    
    if (superSimpleMatch) {
      let name = superSimpleMatch[1].trim();
      
      // Clean OCR errors
      name = name
        .replace(/\s+C\s+Sm\s+/g, ' √áSM ')
        .replace(/\s+Dem\s+I\s+R\s+/g, ' DEMƒ∞R ')
        .replace(/\s+C\s+El\s+I\s+K\s+/g, ' √áELƒ∞K ')
        .replace(/\s+A\s+S\s*$/g, ' A.≈û.')
        .replace(/\s+/g, ' ')
        .trim();
      
      if (name && name.length > 2) {
        const fullName = `USLU ${name} A.≈û.`;
        console.log('‚úÖ Found customer name (SUPER SIMPLE PATTERN):', fullName);
        return fullName;
      }
    }
    
    // DEBUG: Let's see what we actually have in the text
    console.log('üîç DEBUG: Looking for "USLU" in text...');
    const usluMatch = text.match(/USLU/i);
    console.log('üîç DEBUG: USLU match:', usluMatch);
    
    console.log('üîç DEBUG: Looking for "Sigortalƒ±" in text...');
    const sigortaliMatch = text.match(/Sigortalƒ±/i);
    console.log('üîç DEBUG: Sigortalƒ± match:', sigortaliMatch);
    
    console.log('üîç DEBUG: Text sample around Sigortalƒ±:', text.substring(text.indexOf('Sigortalƒ±') - 50, text.indexOf('Sigortalƒ±') + 200));
    
    // Pattern 1c: Direct match for the exact OCR pattern we're seeing (test both texts)
    const pattern1ca = /(Uslu\s+C\s+Sm\s+Dem\s+I\s+R\s+C\s+El\s+I\s+K\s+A\s+S)/i;
    const pattern1cb = /(USLU\s+C\s+SM\s+DEM\s+I\s+R\s+C\s+EL\s+I\s+K\s+A\s+S)/i;
    
    const match1ca = cleanText.match(pattern1ca);
    const match1cb = normalizedText.match(pattern1cb);
    const match1c = match1ca || match1cb;
    
    if (match1c) {
      let name = match1c[1].trim();
      
      // Clean OCR errors
      name = name
        .replace(/\s+C\s+Sm\s+/g, ' √áSM ')
        .replace(/\s+C\s+SM\s+/g, ' √áSM ')
        .replace(/\s+Dem\s+I\s+R\s+/g, ' DEMƒ∞R ')
        .replace(/\s+DEM\s+I\s+R\s+/g, ' DEMƒ∞R ')
        .replace(/\s+C\s+El\s+I\s+K\s+/g, ' √áELƒ∞K ')
        .replace(/\s+C\s+EL\s+I\s+K\s+/g, ' √áELƒ∞K ')
        .replace(/\s+A\s+S\s*$/g, ' A.≈û.')
        .replace(/\s+/g, ' ')
        .trim();
      
      if (name && name.length > 5) {
        console.log('‚úÖ Found customer name (pattern 1c - exact OCR):', name);
        return name;
      }
    }
    
    // Pattern 1b: Look for "Sigortali Adi/Unvani :" followed by company name
    const pattern1d = /Sigortali.*?Adi.*?Unvani.*?:\s*([A-Z\s\.]+?)(?:\s+Adresi|$)/i;
    const match1d = cleanText.match(pattern1d);
    if (match1d) {
      let name = match1d[1].trim();
      
      // Clean OCR errors
      name = name
        .replace(/\s+C\s+Sm\s+/g, ' √áSM ')
        .replace(/\s+Dem\s+I\s+R\s+/g, ' DEMƒ∞R ')
        .replace(/\s+C\s+El\s+I\s+K\s+/g, ' √áELƒ∞K ')
        .replace(/\s+A\s+S\s*$/g, ' A.≈û.')
        .replace(/\s+/g, ' ')
        .trim();
      
      if (name && name.length > 2 && !name.includes('Adresi') && !name.includes('Unvani')) {
        console.log('‚úÖ Found customer name (pattern 1d - Sigortali):', name);
        return name;
      }
    }
    
    // Pattern 2: Look for company names with A.S. or A.S
    const pattern2 = /([A-Z\s]+A\.S\.?)/;
    const match2 = cleanText.match(pattern2);
    if (match2) {
      let name = match2[1].trim();
      
      // Clean OCR errors
      name = name
        .replace(/\s+C\s+Sm\s+/g, ' √áSM ')
        .replace(/\s+Dem\s+I\s+R\s+/g, ' DEMƒ∞R ')
        .replace(/\s+C\s+El\s+I\s+K\s+/g, ' √áELƒ∞K ')
        .replace(/\s+A\s+S\s*$/g, ' A.≈û.')
        .replace(/\s+/g, ' ')
        .trim();
      
      if (name && name.length > 5 && !name.includes('Adresi')) {
        console.log('‚úÖ Found customer name (pattern 2):', name);
        return name;
      }
    }
    
    // Pattern 3: Look for specific OCR-damaged patterns
    const pattern3 = /([A-Z\s]+C\s+Sm\s+[A-Z\s]+A\s+S)/i;
    const match3 = cleanText.match(pattern3);
    if (match3) {
      let name = match3[1].trim();
      
      // Fix the specific pattern
      name = name
        .replace(/\s+C\s+Sm\s+/g, ' √áSM ')
        .replace(/\s+Dem\s+I\s+R\s+/g, ' DEMƒ∞R ')
        .replace(/\s+C\s+El\s+I\s+K\s+/g, ' √áELƒ∞K ')
        .replace(/\s+A\s+S\s*$/g, ' A.≈û.')
        .replace(/\s+/g, ' ')
        .trim();
      
      if (name && name.length > 5 && !name.includes('Adresi')) {
        console.log('‚úÖ Found customer name (pattern 3):', name);
        return name;
      }
    }
    
    // Pattern 4: Fallback - look for "USLU" or "Uslu" followed by company name
    const pattern4 = /(USLU|Uslu)\s+[A-Z\s]+A\.S\.?/i;
    const match4 = cleanText.match(pattern4);
    if (match4) {
      let name = match4[0].trim();
      
      // Clean OCR errors
      name = name
        .replace(/\s+C\s+Sm\s+/g, ' √áSM ')
        .replace(/\s+Dem\s+I\s+R\s+/g, ' DEMƒ∞R ')
        .replace(/\s+C\s+El\s+I\s+K\s+/g, ' √áELƒ∞K ')
        .replace(/\s+A\s+S\s*$/g, ' A.≈û.')
        .replace(/\s+/g, ' ')
        .trim();
      
      if (name && name.length > 5) {
        console.log('‚úÖ Found customer name (pattern 4 - USLU/Uslu):', name);
        return name;
      }
    }
    
    // Pattern 5: Try the original deprem functions as fallback
    const depremName = extractInsuredNameAdvanced(text) || extractCustomerName(text);
    if (depremName) {
      console.log('‚úÖ Found customer name (deprem fallback):', depremName);
      return depremName;
    }
    
    console.log('‚ùå No customer name found');
    return null;
  }

  function extractTCNumber(text: string): string | null {
    const patterns = [
      // Pattern 1: "TCKN/VKN" followed by "Vergi Dairesi" then ":34*******22"
      /TCKN\/VKN[\s\S]{0,50}?Vergi\s+Dairesi[\s\S]{0,50}?:([0-9*]{11})/i,
      // Pattern 2: Direct match
      /(?:TC|TCKN|T\.C\.|Kimlik)\s*(?:No|Numarasƒ±)?\s*:?\s*([0-9*]{11})/i,
      // Pattern 3: TCKNVKN format
      /TCKNVKN[\s\/]*:?\s*(\d{2}\*+\d{2})/i,
      // Pattern 4: Just look for any 11-digit number with stars
      /\b(\d{2}\*{6,8}\d{2})\b/,
      /[^0-9]([0-9*]{11})(?![0-9*])/,
    ];
  
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const tcNo = match[1].trim();
        if (tcNo.length === 11) {
          return tcNo;
        }
      }
    }
    
    return null;
  }

  function extractStartDate(text: string): string | null {
    // First try to find all dates in the text
    const allDates = text.match(/\b([0-9]{2}\/[0-9]{2}\/[0-9]{4})\b/g);
    
    if (allDates && allDates.length >= 2) {
      // Parse dates and return the earlier one (start date)
      const date1 = new Date(allDates[0].split('/').reverse().join('-'));
      const date2 = new Date(allDates[1].split('/').reverse().join('-'));
      return date1 < date2 ? allDates[0] : allDates[1];
    }
    
    const patterns = [
      // Pattern 1: "Ba≈ülangƒ±√ß Tarihi" followed by "Yenileme No" then ":20/08/2025"
      /Ba[≈üs]lang[ƒ±i\u0131][\u00e7c]\s*Tarihi[\s\S]{0,50}?Yenileme\s+No[:\s]*\d+\s*\n\s*:([0-9]{1,2}[\/\-\.][0-9]{1,2}[\/\-\.][0-9]{2,4})/i,
      // Pattern 2: Direct match after label
      /Ba[≈üs]lang[ƒ±i\u0131][\u00e7c]\s*Tarihi\s*\n\s*:([0-9]{1,2}[\/\-\.][0-9]{1,2}[\/\-\.][0-9]{2,4})/i,
      // Pattern 3: Simple match
      /Ba[≈üs]lang[ƒ±i\u0131][\u00e7c]\s*Tarihi\s*:?\s*([0-9]{1,2}[\/\-\.][0-9]{1,2}[\/\-\.][0-9]{2,4})/i,
      // Pattern 4: Look for date pattern near "langic terih" (OCR error)
      /langic\s*terih[^\d]{0,20}?([0-9]{1,2}[\/\-\.][0-9]{1,2}[\/\-\.][0-9]{4})/i
    ];

    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        let dateStr = match[1].trim();
        // Normalize date format to DD/MM/YYYY
        dateStr = dateStr.replace(/\./g, '/');
        // Handle 2-digit year
        if (dateStr.match(/\d{1,2}\/\d{1,2}\/\d{2}$/)) {
          dateStr = dateStr.replace(/(\d{1,2}\/\d{1,2}\/)(\d{2})$/, '$120$2');
        }
        return dateStr;
      }
    }

    return null;
  }

  function extractEndDate(text: string): string | null {
    // First try to find all dates in the text
    const allDates = text.match(/\b([0-9]{2}\/[0-9]{2}\/[0-9]{4})\b/g);
    
    if (allDates && allDates.length >= 2) {
      // Parse dates and return the later one (end date)
      const date1 = new Date(allDates[0].split('/').reverse().join('-'));
      const date2 = new Date(allDates[1].split('/').reverse().join('-'));
      return date1 > date2 ? allDates[0] : allDates[1];
    }
    
    const patterns = [
      // Pattern 1: "Bitg Tarihi" (OCR error) followed by "Yenileme No" then second date
      /Bit[gi\u011f]\s*Tarihi[\s\S]{0,50}?Yenileme\s+No[:\s]*\d+\s*\n\s*:[0-9]{1,2}[\/\-\.][0-9]{1,2}[\/\-\.][0-9]{2,4}\s*\n\s*:([0-9]{1,2}[\/\-\.][0-9]{1,2}[\/\-\.][0-9]{2,4})/i,
      // Pattern 2: Direct match after label
      /Bit[gi\u011f\u015fs]\s*Tarihi\s*\n\s*:([0-9]{1,2}[\/\-\.][0-9]{1,2}[\/\-\.][0-9]{2,4})/i,
      // Pattern 3: Simple match
      /Biti[\u015fsg\u0163]\s*Tarihi\s*:?\s*([0-9]{1,2}[\/\-\.][0-9]{1,2}[\/\-\.][0-9]{2,4})/i
    ];

    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        let dateStr = match[1].trim();
        // Normalize date format to DD/MM/YYYY
        dateStr = dateStr.replace(/\./g, '/');
        // Handle 2-digit year
        if (dateStr.match(/\d{1,2}\/\d{1,2}\/\d{2}$/)) {
          dateStr = dateStr.replace(/(\d{1,2}\/\d{1,2}\/)(\d{2})$/, '$120$2');
        }
        return dateStr;
      }
    }

    return null;
  }

  function extractIssueDate(text: string): string | null {
    // In raw text, dates appear at top before labels due to OCR order
    // Look for pattern: "20/08/2025" then "20/08/2025 14:04" then ":0" then labels
    const patterns = [
      // Pattern 1: First date at document start (before "Ba≈ülangƒ±√ß Tarihi")
      /^[\s\S]{0,200}?([0-9]{1,2}\/[0-9]{1,2}\/[0-9]{4})\s*\n[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{4}\s+[0-9]{1,2}:[0-9]{2}\s*\n:0\s*\nBa[\u015fs]lang/im,
      // Pattern 2: After "Tanzim Tarihi" in standard position
      /Tanzim\s+Tarihi[\s\S]{0,100}?D[√ºu]zenleme\s+Tarihi[\s\S]{0,50}?:([0-9]{1,2}[\/\.\-][0-9]{1,2}[\/\.\-][0-9]{4})/i
    ];

    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }

    return null;
  }

  function extractPolicyPremium(text: string): string | null {
    const patterns = [
      // Pattern: "Poli√ße Primi" followed by multiple lines then ":613,00"
      /Poli[√ßc]e\s+Primi\s*\n[\s\S]{0,100}?:([\d\.,]+)/i,
      // Pattern: Direct match
      /Poli[√ßc]e\s+Primi\s*:?\s*([\d\.,]+)/i,
      // Pattern: "prim" followed by amount (OCR error)
      /igorta['`]?prim[^\d]{0,20}?(\d{1,4}[,\.]\d{2})/i,
      // Pattern: Standalone premium amount (3-4 digits with 2 decimals)
      /\b(\d{2,4}[,\.]\d{2})\b/
    ];

    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const premium = match[1].trim().replace('.', ',');
        // Validate it's a reasonable premium (not too large, not a date)
        const numValue = parseFloat(premium.replace(',', '.'));
        if (numValue >= 10 && numValue <= 50000) {
          return premium;
        }
      }
    }

    return null;
  }

  function extractInsuranceCompany(text: string): string | null {
    const companies = [
      'ANADOLU ANONƒ∞M T√úRK Sƒ∞GORTA ≈ûƒ∞RKETƒ∞', 'ANADOLU Sƒ∞GORTA', 'AXA Sƒ∞GORTA', 'ALLIANZ', 'AK Sƒ∞GORTA', 
      'HALK Sƒ∞GORTA', 'ZURICH', 'HDI', 'MAPFRE', 'RAY Sƒ∞GORTA',
      'NEVA Sƒ∞GORTA', 'UNICO SIGORTA', 'UNICO', 'GENERALI', 'LIBERTY', 'GROUPAMA',
      'SOMPO', 'QUICK', 'CORPUS', 'BEREKET', 'NEOVA', 'T√úRK Nƒ∞PPON',
      'DUBAI STAR', 'GRƒ∞ Sƒ∞GORTA', 'ANKARA Sƒ∞GORTA', 'GULF Sƒ∞GORTA'
    ];
    
    const patterns = [
      /Sigorta\s+[≈ûS]irketi\s+Unvan[ƒ±i]?\s*:?\s*([A-Z√áƒûƒ∞√ñ≈û√ú\s\.]+?)(?=\n|$)/i,
      /Sigorta\s+[≈ûS]irketi\s*:?\s*([A-Z√áƒûƒ∞√ñ≈û√ú\s\.]+?)(?=\n|Adres|$)/i
    ];
    
    // Try specific patterns first
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const companyName = match[1].trim();
        if (companyName.length > 3) {
          return companyName;
        }
      }
    }
    
    // Try to find company name in text
    const textUpper = text.toUpperCase();
    for (const company of companies) {
      if (textUpper.includes(company)) {
        return company;
      }
    }
    
    return null;
  }

  function extractBuildingCoverageAmount(text: string): string | null {
    const patterns = [
      /Bina\s*Teminat\s*Bedeli\s*:?\s*([\d\.,]+)\s*TL/i,
      /Teminat\s*Bedeli\s*:?\s*([\d\.,]+)\s*TL/i,
      /TEMINAT\s*BEDEL[ƒ∞I]\s*L[ƒ∞I]M[ƒ∞I]T[ƒ∞I]\s*\(TL\)[\s\S]{0,50}?Bina\s*Teminat\s*Bedeli[\s\S]{0,30}?([\d]{3}[\.,]\d{3}[\.,]\d{2})/i,
      /Bina\s*Teminat[\s\S]{0,30}?([\d]{3,}[\.,]\d{3}[\.,]\d{2})/i,
      // Pattern for unformatted 8-digit numbers (like 63168000) - look near tanzim/prim
      /tanzimtarhl[\s\S]{0,50}?(\d{8})[\s\S]{0,20}?\d{2,4}[,\.]\d{2}/i,
      // Pattern for standalone 8-digit number (not bina/adres code)
      /\b(\d{8})\b(?!\d)/
    ];

    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        let amount = match[1].trim();
        // Skip if it's bina kodu (5816063) or adres kodu (1188148280)
        if (amount === '5816063' || amount.length === 10) {
          continue;
        }
        // If it's a large unformatted number (8 digits), format it
        if (/^\d{8}$/.test(amount)) {
          let num = parseInt(amount);
          // 63168000 should be 631,680.00 TL (divide by 100)
          // This is because OCR reads the amount without decimal separator
          if (num >= 10000000 && num <= 100000000) {
            num = num / 100; // Convert to actual amount
            // Format as Turkish currency: 631.680,00
            amount = num.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            return amount;
          }
        } else {
          return amount;
        }
      }
    }

    return null;
  }

  function extractVehicleValue(text: string): string | null {
    const patterns = [
      /(?:ARA√á DEƒûER|Ara√ß Deƒüer|Vehicle Value)\s*:?\s*([\d\.,]+)/i,
      /Market\s+Value\s*:?\s*([\d\.,]+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }
    
    return null;
  }

  function extractKaskoPremium(text: string): string | null {
    const patterns = [
      /(?:KASKO|Kasko)\s*(?:PRƒ∞M|Prim|Premium)\s*:?\s*([\d\.,]+)/i,
      /Comprehensive\s+Premium\s*:?\s*([\d\.,]+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }
    
    return null;
  }

  function extractMaliSorumluluk(text: string): string | null {
    const patterns = [
      /(?:MALƒ∞ SORUMLULUK|Mali Sorumluluk)\s*:?\s*([\d\.,]+)/i,
      /Liability\s+Coverage\s*:?\s*([\d\.,]+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }
    
    return null;
  }

  function extractFerdiKaza(text: string): string | null {
    const patterns = [
      /(?:FERDƒ∞ KAZA|Ferdi Kaza)\s*:?\s*([\d\.,]+)/i,
      /Personal\s+Accident\s*:?\s*([\d\.,]+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }
    
    return null;
  }

  function extractHuksalKoruma(text: string): string | null {
    const patterns = [
      /(?:HUKUKSAL KORUMA|Hukuksal Koruma)\s*:?\s*([\d\.,]+)/i,
      /Legal\s+Protection\s*:?\s*([\d\.,]+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }
    
    return null;
  }

  // Additional missing extraction functions

  function extractCompanyAddress(text: string): string | null {
    // For DASK documents, company address is not typically shown
    // Return null to avoid extracting incorrect data
    return null;
  }

  function extractGrossPremium(text: string): string | null {
    const patterns = [
      /(?:BR√úT PRƒ∞M|Br√ºt Prim|Gross Premium)\s*:?\s*([\d\.,]+)/i,
      /(?:TOPLAM TUTAR|Toplam Tutar|Total Amount)\s*:?\s*([\d\.,]+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }
    
    return null;
  }

  function extractNetPremium(text: string): string | null {
    const patterns = [
      /(?:NET PRƒ∞M|Net Prim|Net Premium)\s*:?\s*([\d\.,]+)/i,
      /(?:NET TUTAR|Net Tutar|Net Amount)\s*:?\s*([\d\.,]+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }
    
    return null;
  }

  function extractTaxAmount(text: string): string | null {
    const patterns = [
      /(?:VERGƒ∞ TUTARI|Vergi Tutarƒ±|Tax Amount)\s*:?\s*([\d\.,]+)/i,
      /(?:KDV|Kdv)\s*:?\s*([\d\.,]+)/i,
      /(?:TAX|Tax)\s*:?\s*([\d\.,]+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }
    
    return null;
  }

  // Expert and Damage related functions for hasar/ekspertiz documents

  function extractExpertName(text: string): string | null {
    const patterns = [
      /(?:EKSPER ADI|Eksper Adƒ±|Expert Name)\s*:?\s*([A-Z√áƒûIƒ∞√ñ≈û√ú\s]+)/i,
      /(?:EKSPER|Expert)\s*:?\s*([A-Z√áƒûIƒ∞√ñ≈û√ú\s]+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const name = match[1].trim();
        if (name.length > 2 && /^[A-Z√áƒûIƒ∞√ñ≈û√ú\s]+$/.test(name)) {
          return name;
        }
      }
    }
    
    return null;
  }

  function extractExpertRegistry(text: string): string | null {
    const patterns = [
      /(?:Sƒ∞Cƒ∞L NO|Sicil No|Registry No)\s*:?\s*([0-9]+)/i,
      /(?:Sƒ∞Cƒ∞L NUMARASI|Sicil Numarasƒ±|Registry Number)\s*:?\s*([0-9]+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }
    
    return null;
  }

  function extractDamageDate(text: string): string | null {
    const patterns = [
      /(?:HASAR TARƒ∞Hƒ∞|Hasar Tarihi|Damage Date)\s*:?\s*([0-9]{1,2}[\/\.\-][0-9]{1,2}[\/\.\-][0-9]{4})/i,
      /(?:KAZA TARƒ∞Hƒ∞|Kaza Tarihi|Accident Date)\s*:?\s*([0-9]{1,2}[\/\.\-][0-9]{1,2}[\/\.\-][0-9]{4})/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }
    
    return null;
  }

  function extractDamageLocation(text: string): string | null {
    const patterns = [
      /(?:HASAR YERƒ∞|Hasar Yeri|Damage Location)\s*:?\s*([A-Z√áƒûIƒ∞√ñ≈û√úa-z√ßƒüƒ±i√∂≈ü√º0-9\s\.\,\/\-]+?)(?=\s*\n)/i,
      /(?:KAZA YERƒ∞|Kaza Yeri|Accident Location)\s*:?\s*([A-Z√áƒûIƒ∞√ñ≈û√úa-z√ßƒüƒ±i√∂≈ü√º0-9\s\.\,\/\-]+?)(?=\s*\n)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const location = match[1].trim();
        if (location.length > 3) return location;
      }
    }
    
    return null;
  }

  function extractDamageDescription(text: string): string | null {
    const patterns = [
      /(?:HASAR TANIMI|Hasar Tanƒ±mƒ±|Damage Description)\s*:?\s*([A-Z√áƒûIƒ∞√ñ≈û√úa-z√ßƒüƒ±i√∂≈ü√º0-9\s\.\,\/\-\(\)]+)/i,
      /(?:HASAR DETAYLARI|Hasar Detaylarƒ±|Damage Details)\s*:?\s*([A-Z√áƒûIƒ∞√ñ≈û√úa-z√ßƒüƒ±i√∂≈ü√º0-9\s\.\,\/\-\(\)]+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const description = match[1].trim();
        if (description.length > 5) return description;
      }
    }
    
    return null;
  }

  export interface Document {
    id: string;
    filename: string;
    original_filename: string;
    file_type: string;
    file_size: number;
    file_url?: string;
    status: string;
    extracted_data?: any;
    ocr_confidence?: number;
    processing_time?: number;
    error_message?: string;
    created_at: string;
    updated_at: string;
  }

  // Missing extraction functions
  function extractPolicyholderStatus(text: string): string | null {
    const patterns = [
      /Sigorta\s+Ettiren\s+Sƒ±fatƒ±?\s*:?\s*([A-Z√áƒûƒ∞√ñ≈û√ú\s\-]+)/i,
      /Poli√ße\s+Sahibi\s+Sƒ±fatƒ±?\s*:?\s*([A-Z√áƒûƒ∞√ñ≈û√ú\s\-]+)/i,
      /(?:Mal\s+Sahibi|Owner)\s*:?\s*([A-Z√áƒûƒ∞√ñ≈û√ú\s\-]+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const status = match[1].trim();
        if (status.length > 2) return status;
      }
    }
    
    return null;
  }

  function extractPolicyholderPhone(text: string): string | null {
    const patterns = [
      /Sigorta\s+Ettiren[\s\S]{0,100}?(?:Cep|Sabit)\s*Telefonu\s*:?\s*\(?([0-9\-\s\*\(\)]+)\)?/i,
      /Poli√ße\s+Sahibi[\s\S]{0,100}?Telefon\s*:?\s*\(?([0-9\-\s\*\(\)]+)\)?/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const phone = match[1].trim();
        const digitCount = phone.replace(/[^0-9]/g, '').length;
        if (digitCount >= 7) return phone;
      }
    }
    
    return null;
  }

  function extractBuildingCoverage(text: string): string | null {
    const patterns = [
      /Bina\s*Teminatƒ±?\s*:?\s*([A-Z√áƒûƒ∞√ñ≈û√ú\s]+)/i,
      /DEPREM\s+BINA/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match) {
        if (match[0].includes('DEPREM BINA')) return 'DEPREM BINA';
        if (match[1]) return match[1].trim();
      }
    }
    
    return null;
  }

  function extractAgencyNumber(text: string): string | null {
    const patterns = [
      /Acente\s+(?:Kodu|No)\s*:?\s*(\d{5,10})/i,
      /Acente\s+Numarasƒ±\s*:?\s*(\d{5,10})/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }
    
    return null;
  }

  function extractRenewalNumber(text: string): string | null {
    const patterns = [
      /Yenileme\s+No\s*:?\s*(\d+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }
    
    return null;
  }

  function extractDiscountInfo(text: string): string | null {
    const patterns = [
      /ƒ∞ndirim\/S√ºprim\s*:?\s*([^\n]+)/i,
      /ƒ∞ndirim\s+Bilgileri\s*:?\s*([^\n]+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const info = match[1].trim();
        if (info.length > 2) return info;
      }
    }
    
    return null;
  }

  function extractBuildingCode(text: string): string | null {
    const patterns = [
      /Bina\s+Kodu\s*:?\s*(\d{6,10})/i,
      /bina\s*kodu[\s\S]{0,20}?(\d{7})/i,  // More flexible pattern
      // Look for 7-digit number before address code
      /(\d{7})\s+\d{10}/
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const code = match[1].trim();
        // Building codes are typically 7 digits
        if (code.length === 7) {
          return code;
        }
      }
    }
    
    return null;
  }

  function extractAddressCode(text: string): string | null {
    const patterns = [
      /Adres\s+Kodu\s*:?\s*(\d{8,12})/i,
      /adres\s*kodu[\s\S]{0,20}?(\d{10})/i,  // More flexible pattern
      // Look for 10-digit number after building code
      /\d{7}\s+(\d{10})/
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const code = match[1].trim();
        // Address codes are typically 10 digits
        if (code.length === 10) {
          return code;
        }
      }
    }
    
    return null;
  }

  function extractBuildingTypeAdvanced(text: string): string | null {
    const patterns = [
      /Yapƒ±\s+Tarzƒ±\s*:?\s*([A-Z√áƒûƒ∞√ñ≈û√ú\s]+)/i,
      /(?:MESKEN|ƒ∞≈ûYERƒ∞)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match) {
        if (match[0].includes('MESKEN')) return 'MESKEN';
        if (match[1]) return match[1].trim();
      }
    }
    
    return null;
  }

  function extractBuildingYear(text: string): string | null {
    const patterns = [
      /Bina\s+ƒ∞n≈üa\s+Yƒ±lƒ±\s*:?\s*(\d{4})/i,
      /(\d{4})\s*-\s*(\d{4})/
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match) {
        if (match[2]) return `${match[1]}-${match[2]}`;
        if (match[1]) return match[1].trim();
      }
    }
    
    return null;
  }

  function extractApartmentArea(text: string): string | null {
    const patterns = [
      /Daire\s+Br√ºt\s+Y√ºz√∂l√ß√ºm√º\s*:?\s*(\d+)/i,
      /Alan\s*:?\s*(\d+)\s*m2/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }
    
    return null;
  }

  function extractFloorLocation(text: string): string | null {
    const patterns = [
      /Bulunduƒüu\s+Kat\s*:?\s*([A-Z√áƒûƒ∞√ñ≈û√ú0-9\s]+)/i,
      /Kat\s*:?\s*(ZEMƒ∞N|BODRUM|\d+)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) return match[1].trim();
    }
    
    return null;
  }

  function extractDamageStatus(text: string): string | null {
    const patterns = [
      /Hasar\s+Durumu\s*:?\s*([A-Z√áƒûƒ∞√ñ≈û√ú\s]+)/i,
      /(?:HASARSIZ|HASARLI)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match) {
        if (match[0].includes('HASARSIZ')) return 'HASARSIZ';
        if (match[0].includes('HASARLI')) return 'HASARLI';
        if (match[1]) return match[1].trim();
      }
    }
    
    return null;
  }

  function extractProvince(text: string): string | null {
    const provinces = ['ADANA', 'ANKARA', 'ANTALYA', 'BURSA', 'ƒ∞STANBUL', 'ƒ∞ZMƒ∞R', 'MERSƒ∞N', 'SAMSUN'];
    const textUpper = text.toUpperCase();
    for (const province of provinces) {
      if (textUpper.includes(province)) return province;
    }
    return null;
  }

  function extractInsuredAddress(text: string): string | null {
    const patterns = [
      /ƒ∞leti≈üim\s+Adresi\s*:?\s*([A-Z√áƒûIƒ∞√ñ≈û√ú0-9\s\.\,\-\/]+?)(?=\s*\n)/i,
      /Adres\s*:?\s*([A-Z√áƒûIƒ∞√ñ≈û√ú0-9\s\.\,\-\/]+?)(?=\s*\n)/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const address = match[1].trim();
        if (address.length > 10) return address;
      }
    }
    
    return null;
  }

  function extractInsuredPhone(text: string): string | null {
    const patterns = [
      /Cep\s+Telefonu\s*[\n:]+\s*\(?([0-9\-\s\*\(\)]+)\)?/i
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const phone = match[1].trim();
        const digitCount = phone.replace(/[^0-9]/g, '').length;
        if (digitCount >= 7) return phone;
      }
    }
    
    return null;
  }

  function extractCompanyPhone(text: string): string | null {
    const patterns = [
      /≈ûirket\s+Telefonu\s*:?\s*(\(?[0-9\s\-]+\)?)/i,
      /(?:0850|0212|0216|0312|0242)\s*[0-9]{3}\s*[0-9]{2}\s*[0-9]{2}/,
      /(?:0\d{3})\s*[0-9]{3}\s*[0-9]{2}\s*[0-9]{2}/,
    ];

    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match) {
        const phone = (match[1] || match[0]).trim();
        const digitCount = phone.replace(/[^0-9]/g, '').length;
        if (digitCount >= 10) return phone;
      }
    }

    return null;
  }

  // Global exclude patterns for text cleaning
  const excludePatterns = [
    /\b(?:SAYFA|PAGE|TARƒ∞H|DATE|NO|NUMARA|NUMBER|TL|TRY|\d{1,3}\.\d{1,3},\d{2})\b/gi,
    /\b(?:VE|VEYA|ƒ∞LE|ƒ∞√áƒ∞N|BU|≈ûU|O|Bƒ∞R|Bƒ∞RKA√á|HER|Hƒ∞√áBƒ∞R|BAZI|T√úM|HEPSƒ∞)\b/gi,
    /\b(?:Sƒ∞GORTA|POLƒ∞√áE|TAAHH√úT|TEMƒ∞NAT|PRƒ∞M|ZEYƒ∞L|EK|GENEL|√ñZEL|≈ûARTLAR|KO≈ûULLAR)\b/gi,
    /\b(?:TC|VKN|MERSƒ∞S|VERGƒ∞|Kƒ∞MLƒ∞K|PASAPORT|S√ñZLE≈ûME|BELGE|DOSYA)\s*[.:]?\s*\d*\b/gi,
    /\b(?:ADRES|ADRESƒ∞|ADRESƒ∞Nƒ∞Z|ADRES Bƒ∞LGƒ∞LERƒ∞|ADRES Bƒ∞LGƒ∞Sƒ∞|ADRES Bƒ∞LGƒ∞LERƒ∞Nƒ∞Z)\s*:?\s*/gi,
    /\b(?:TELEFON|TEL|GSM|CEP|FAX|FAKS|TELEFON NUMARASI|TELEFON NO|TEL NO|GSM NO|CEP NO)\s*:?\s*/gi,
    /\b(?:E[\-\s]?POSTA|EMA[ƒ∞I]L|E[\-\s]?MA[Iƒ∞]L|E[\-\s]?POSTA ADRES[Iƒ∞]|MA[Iƒ∞]L ADRES[Iƒ∞])\s*:?\s*/gi,
    /\b(?:TOPLAM|TUTAR|TUTARI|TUTARLAR|TOPLAM TUTAR|GENEL TOPLAM|ARA TOPLAM|KDV HARƒ∞√á|KDV DAHƒ∞L|KDV\s*%?\s*\d*|\d+%\sKDV)\s*:?\s*/gi,
    /\b(?:TARƒ∞H|TARƒ∞Hƒ∞|TARƒ∞HLER|TARƒ∞H ARALIƒûI|D√ñNEM|D√ñNEMƒ∞|BA≈ûLANGI√á TARƒ∞Hƒ∞|Bƒ∞Tƒ∞≈û TARƒ∞Hƒ∞|GE√áERLƒ∞Lƒ∞K TARƒ∞Hƒ∞|GE√áERLƒ∞Lƒ∞K S√úRESƒ∞)\s*:?\s*/gi,
    /\b(?:A√áIKLAMA|A√áIKLAMALAR|NOT|NOTLAR|A√áIKLAMA SATIRI|A√áIKLAMA METNƒ∞|DETAY|DETAYLAR|DETAY Bƒ∞LGƒ∞|DETAY Bƒ∞LGƒ∞LER)\s*:?\s*/gi,
    /\b(?:ƒ∞MZA|ƒ∞MZALAYAN|ƒ∞MZA SAHƒ∞Bƒ∞|ƒ∞MZA TARƒ∞Hƒ∞|ƒ∞MZA YETKƒ∞Sƒ∞|YETKƒ∞Lƒ∞ ƒ∞MZASI|YETKƒ∞Lƒ∞ ADI SOYADI|YETKƒ∞Lƒ∞ √úNVANI)\s*:?\s*/gi,
    /\b(?:ONAY|ONAYLAYAN|ONAY TARƒ∞Hƒ∞|ONAY DURUMU|ONAY NUMARASI|ONAY KODU|REFERANS NO|ƒ∞≈ûLEM NO|BELGE NO|DOSYA NO|EVRAK NO|KAYIT NO)\s*:?\s*/gi,
    /\b(?:BANKA|BANKA ADI|BANKA ≈ûUBESƒ∞|≈ûUBE KODU|HESAP NO|IBAN|HESAP SAHƒ∞Bƒ∞|ALICI|G√ñNDEREN|BOR√áLU|ALACAKLI)\s*:?\s*/gi,
    /\b(?:TUTANAK|TUTANAK NO|TUTANAK TARƒ∞Hƒ∞|TUTANAK KONUSU|TUTANAK A√áIKLAMASI|TUTANAK TUTAN|TUTANAK TUTAN Kƒ∞≈ûƒ∞|TUTANAK TUTULAN Kƒ∞≈ûƒ∞|TUTANAK TUTULAN YER|TUTANAK TUTULAN TARƒ∞H)\s*:?\s*/gi,
    /\b(?:TA≈ûINMAZ|TA≈ûINMAZIN ADRESƒ∞|TA≈ûINMAZIN T√úR√ú|TA≈ûINMAZIN ALANI|TA≈ûINMAZIN DEƒûERƒ∞|TA≈ûINMAZIN TAPU Bƒ∞LGƒ∞LERƒ∞|TAPU KAYDI|TAPU SICƒ∞L NO|PAFTA NO|ADA NO|PARSEL NO|Nƒ∞TELƒ∞K|Mƒ∞KTAR|Bƒ∞Rƒ∞M Fƒ∞YAT|ADET|M2|M¬≤|M\^2|METREKARE|METRE KARE|MT|CM|MM|KM|KG|G|MG|LT|ML|CC|DERE|¬∞|SANTƒ∞GRAD|DERECE|DAKƒ∞KA|SANƒ∞YE|SAAT|G√úN|HAFTA|AY|YIL|Y√úZYIL|ASIR|Y√úZDE|%|DERECESƒ∞|DERECE\s*:?\s*[0-9.,]+\s*¬∞?\s*[CFK]?¬∞?|¬∞[CFK]?\s*:?\s*[0-9.,]+)\b/gi,
    /\b(?:[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,})\b/gi,
    /\b(?:https?:\/\/)?(?:www\.)?[A-Z0-9.-]+\.[A-Z]{2,}(?:\/[^\s]*)?\b/gi,
    /\b(?:\d{1,2}[\/\-.]\d{1,2}[\/\-.]\d{2,4}|\d{4}[\/\-.]\d{1,2}[\/\-.]\d{1,2})\b/gi,
    /\b(?:\d{1,3}(?:\.\d{3})*,\d{2}\s*(?:TL|TRY|USD|EUR|GBP|JPY|CHF|AUD|CAD|CNY|RUB|‚Ç∫|‚Ç¨|¬£|\$))\b/gi,
  ];





  export function useDocuments() {
    const [documents, setDocuments] = useState<Document[]>([]);
    const [loading, setLoading] = useState(true);
    const { user } = useAuth();

    const fetchDocuments = async () => {
      if (!user) return;

      try {
        const { data, error } = await supabase
          .from('documents')
          .select('*')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false });

        if (error) throw error;
        setDocuments(data || []);
      } catch (error) {
        console.error('Error fetching documents:', error);
      } finally {
        setLoading(false);
      }
    };

    const uploadDocument = async (file: File) => {
      if (!user) throw new Error('User not authenticated');

      const fileExt = file.name.split('.').pop()?.toLowerCase() || '';
      const fileName = `${user.id}/${Date.now()}.${fileExt}`;

      // Upload file to storage
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('documents')
        .upload(fileName, file);

      if (uploadError) throw uploadError;

      // Create document record
      const { data: docData, error: docError } = await supabase
        .from('documents')
        .insert({
          user_id: user.id,
          filename: fileName,
          original_filename: file.name,
          file_type: file.type,
          file_size: file.size,
          file_url: uploadData.path,
          status: 'uploading'
        })
        .select()
        .single();

      if (docError) throw docError;

      try {
        console.log('üöÄ Processing document...');
        console.log(`üìÑ Document ID: ${docData.id}`);
        console.log(`üìÑ File Type: ${file.type}`);
        
        // Record start time for processing time calculation
        const startTime = Date.now();
        
        // Process the document using DocumentProcessor
        const processedDoc = await DocumentProcessor.processDocument(file);
        
        // Update document status to processing
        await supabase
          .from('documents')
          .update({ status: 'processing' })
          .eq('id', docData.id);
        
        // Extract text and process with OCR if needed
        let extractedText = processedDoc.text;
        let ocrConfidence = 1.0; // Default confidence for text-based PDFs
        
        console.log('üîç Initial extracted text from PDF:', extractedText.length, 'characters');
        console.log('üîç Initial text preview:', extractedText.substring(0, 200));
        
        // If text is empty or too short, try OCR
        if (processedDoc.text.trim().length < 50 || processedDoc.metadata.isScanned) {
          console.log('üîç Low text content, running OCR...');
          const base64 = await new Promise<string>((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => {
              const result = reader.result?.toString().split(',')[1];
              if (result) resolve(result);
              else reject(new Error('Failed to convert file to base64'));
            };
            reader.onerror = () => reject(new Error('FileReader error'));
            reader.readAsDataURL(file);
          });
          
          const ocrResult = await processDocumentInline(docData.id, base64, file.type);
          if (ocrResult.success && ocrResult.data) {
            const data = ocrResult.data as { extractedText?: string; confidence?: number; extractedFields?: any };
            extractedText = data.extractedText || '';
            ocrConfidence = data.confidence || 0.5;
            console.log('üîç OCR extracted text length:', extractedText.length);
            console.log('üîç OCR extracted text preview:', extractedText.substring(0, 200));
          }
        }
        
        // Extract fields from the text
        const documentType = detectDocumentType(extractedText);
        const extractedFields = extractFieldsFromText(extractedText, documentType);
        const confidence = calculateConfidenceScore(extractedText, extractedFields);
        
        console.log('üîç Raw extracted fields before cleaning:', extractedFields);
        console.log('üîç Sample fields:', {
          customer_name: extractedFields.customer_name,
          tc_number: extractedFields.tc_number,
          policy_number: extractedFields.policy_number,
          insurance_company: extractedFields.insurance_company
        });
        
        // Clean and validate extracted fields before saving
        const cleanedFields = cleanExtractedFields(extractedFields);
        console.log('üßπ Cleaned fields for database:', cleanedFields);
        console.log('üßπ Sample cleaned fields:', {
          customer_name: cleanedFields.customer_name,
          tc_number: cleanedFields.tc_number,
          policy_number: cleanedFields.policy_number,
          insurance_company: cleanedFields.insurance_company
        });
        
        // Create a structured data object for database
        const structuredData = {
          document_type: documentType,
          extracted_fields: cleanedFields,
          raw_text: extractedText ? extractedText.substring(0, 10000) : '', // Limit raw text length
          confidence_score: Math.max(confidence, ocrConfidence),
          processing_timestamp: new Date().toISOString(),
          field_count: Object.keys(cleanedFields).length
        };
        
        console.log('üìä Raw text length:', extractedText ? extractedText.length : 0);
        console.log('üìä Raw text preview:', extractedText ? extractedText.substring(0, 200) + '...' : 'No text');
        
        console.log('üìä Structured data for database:', structuredData);
        
        // Calculate processing time safely
        const processingTime = Math.max(0, Math.floor((Date.now() - startTime) / 1000));
        
        // Update document with extracted data
        const { error: updateError } = await supabase
          .from('documents')
          .update({
            status: 'completed',
            extracted_data: structuredData,
            ocr_confidence: Math.max(confidence, ocrConfidence),
            processing_time: processingTime
          })
          .eq('id', docData.id);
          
        if (updateError) {
          console.error('‚ùå Database update error:', updateError);
          console.error('‚ùå Error details:', {
            message: updateError.message,
            details: updateError.details,
            hint: updateError.hint,
            code: updateError.code
          });
          throw updateError;
        }
        
        console.log('‚úÖ Document processing completed successfully');
        await fetchDocuments();
      } catch (error) {
        console.error('‚ùå Unexpected error during processing:', error);
        // Update status to failed
        await supabase
          .from('documents')
          .update({ 
            status: 'failed', 
            error_message: error instanceof Error ? error.message : 'Unknown error'
          })
          .eq('id', docData.id);
        throw error;
      }

      return docData;
    };

    const deleteDocument = async (documentId: string) => {
      if (!user) throw new Error('User not authenticated');

      const { error } = await supabase
        .from('documents')
        .delete()
        .eq('id', documentId)
        .eq('user_id', user.id);

      if (error) throw error;

      setDocuments(prev => prev.filter(doc => doc.id !== documentId));
    };

    useEffect(() => {
      fetchDocuments();

      // Set up real-time subscription
      const subscription = supabase
        .channel('documents_changes')
        .on('postgres_changes', 
          { 
            event: '*', 
            schema: 'public', 
            table: 'documents',
            filter: `user_id=eq.${user?.id}`
          }, 
          () => {
            fetchDocuments();
          }
        )
        .subscribe();

      return () => {
        subscription.unsubscribe();
      };
    }, [user]);

    return {
      documents,
      loading,
      uploadDocument,
      deleteDocument,
      refetch: fetchDocuments
    };
  }